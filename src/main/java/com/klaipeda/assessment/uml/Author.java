package com.klaipeda.assessment.uml;

import javax.persistence.*;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;
import java.util.List;

/**
 * <p>Solution to Task 1 of the assessment</p>
 * <p>
 *     This solution further adopt class Author as an Entity in a distributed system
 *     The entire program adopts web server approach using H2 in memory database
 *     Thou environment adoption is not required in the question, I just decide to take a step further and apply the
 *     knowledge in to a real world scenario
 * </p>
 */
@Entity
public class Author {
    /**
     * <p>
     *      This is an ID which will be Automatically generated by Hibernate when this book instant wants to be persisted in to
     *      database, it's a unique identifier to retrieve the Author data from the database
     * </p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id", nullable = false)
    private Long id;

    //creation of three private variable gender. These variables are adopted as fields to a table Author in a relational database

    /**
     * <p>Name of the Author</p>
     * <p>Can not be null or empty, No Author without a name in reality</p>
     */
    @NotEmpty
    @NotNull
    @Column(nullable = false)
    private String name;

    /**
     * <p>Email of Author</p>
     * <p>
     *     value validation as email must be true, meaning must be a valid email,
     *     value can not be null or empty, since in reality, no Author exist without a name
     * </p>
     */
    @Email
    @NotNull
    @NotEmpty
    @Column(nullable = false)
    private String email;

    /**
     * <p>Author's gender: 'm' for MALE and 'f' for FEMALE</p>
     * <p>
     *     value can not be empty or null, Further more, if the value is not 'm' or 'f', an exception will be thrown
     * </p>
     */
    @Column(nullable = false)
    @NotEmpty
    @NotNull
    private char gender;

    /**
     * <p>
     *     This field as OneToMany relationship with Author Entity/Class
     * </p>
     * <p>
     *     List of books written by the Author. At least one book must be provided, since you cant be an Author without
     *     having written a book
     * </p>
     */
    @OneToMany(mappedBy = "author")
    @NotNull
    @NotEmpty
    @Column(nullable = false)
    private List<Book> books;

    /**Constructor **/
    public Author(String name, String email, char gender) {
        this.name = name;
        this.email = email;
        this.gender = gender;
    }

    public Author() {
    }

    /*Getters and Setters */

    /**
     * <p>
     *     Get ID, this variable is not stated in the assessment UML diagram, however its required to adopt this class
     *     as a Table in the ORM in-memory database (H2).
     * </p>
     * @return Long
     */
    public Long getId() {
        return id;
    }

    /**
     * <p>
     *     set ID field
     * </p>
     * @param id  ID of the Author instant as a row in the database table Author
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * <p>
     *     get Author's name name
     * </p>
     * @return String
     */
    public String getName() {
        return name;
    }

    /**
     * <p>
     *     set Author's name name
     * </p>
     * @param name Name of the author
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * <p>
     *     get Author's email
     * </p>
     * @return String
     */
    public String getEmail() {
        return email;
    }

    /**
     * <p>
     *     sets Author's Email
     * </p>
     * @param email Email of the Author
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * <p>
     *     Get Author's gender: 'm' is MALE and 'f' is FEMALE
     * </p>
     * @return char
     */
    public char getGender() {
        return gender;
    }

    /**
     * <p>
     *     set Author's gender
     * </p>
     * @param gender author's gender, only accepts 'm' for MALE and 's' for FEMALE
     */
    public void setGender(char gender) throws Exception {
        if(gender == 'm' || gender == 'f'){
            this.gender = gender;
        }else{
            throw new Exception("Gender can either be 'm' or 'f'");
        }
    }

    /**
     * <p>Get list of books Authored by this Author</p>
     * @return List<Book>
     */
    public List<Book> getBooks() {
        return books;
    }

    /**
     * Set books authored
     * @param books books authored by this Author
     */
    public void setBooks(List<Book> books) {
        this.books = books;
    }

    /**
     * <p>
     *     returns in the following format
     * </p>
     * <p>
     *     "name (gender) at email"
     * </p>
     * @return String
     */
    @Override
    public String toString() {
        return this.name + " ("+this.gender+") at "+ this.email ;
    }
}
