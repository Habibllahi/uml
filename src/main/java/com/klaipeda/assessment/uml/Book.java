package com.klaipeda.assessment.uml;

import javax.persistence.*;
import javax.validation.constraints.Digits;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;

/**
 * <p>Continuation of Solution to Task 1 of the assessment</p>
 * <p>
 *     This solution further adopt class Author as an Entity in a distributed system
 *     The entire program adopts web server approach using H2 in memory database
 *     Thou environment adoption is not required in the question, I just decide to take a step further and apply the
 *     knowledge in to a real world scenario
 * </p>
 */
@Entity
public class Book {
    /**
     * <p>
     *      This is an ID which will be Automatically generated by Hibernate when this book instant wants to be persisted in to
     *      database, it's a unique identifier to retrieve the Book data from the database
     * </p>
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "id", nullable = false)
    private Long id;

    /**
     * <p>
     *     Name of book
     * </p>
     * <p>
     *     Value can not be null or empty string
     * </p>
     */
    @NotNull
    @NotEmpty
    private String name;

    /**
     * <p>
     *     This field as ManyToOne relationship with Book Entity/Class
     *     The value can not be null, since there cant be book without author
     * </p>
     * <p>
     *     Author that wrote a book, value can not be null since there cant be a book without an Author
     * </p>
     */
    @ManyToOne
    @JoinColumn(name = "author_id", nullable = false)
    @NotNull
    private Author author;

    /**
     * <p>
     *     price of the book in dollars
     * </p>
     * <p>
     *     The value can not be null, The value can only be in two decimal format, THe integer part of the value can
     *     have up to 10 figures
     * </p>
     */
    @NotNull
    @Digits(integer = 10, fraction = 2)
    private double price;

    /**
     * <p>
     *     quantity of book
     * </p>
     * <p>
     *     The value can not be null, there cant be fractional part in the value.
     * </p>
     */
    @NotNull
    @Digits(integer = 10, fraction = 0)
    @Column(nullable = false)
    private int qty;

    /*Constructor*/

    public Book(String name, Author author, double price, int qty) {
        this.name = name;
        this.author = author;
        this.price = price;
        this.qty = qty;
    }

    public Book() {
    }

    /*Getters and Setters*/

    /**
     * <p>
     *     Get ID, this variable is not stated in the assessment UML diagram, however its required to adopt this class
     *     as a Table in the ORM in-memory database (H2).
     * </p>
     * @return Long
     */
    public Long getId() {
        return id;
    }

    /**
     * <p>
     *     set ID field
     * </p>
     * @param id  ID of the Author instant as a row in the database table Author
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * <p>
     *     get name of the book
     * </p>
     * @return String
     */
    public String getName() {
        return name;
    }

    /**
     * <p>
     *     set name of the book
     * </p>
     * @param name book name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * get name of the person that wrote this book
     * @return Author
     */
    public Author getAuthor() {
        return author;
    }

    /**
     * set name of the Author
     * @param author name of the person that wrote this book
     */
    public void setAuthor(Author author) {
        this.author = author;
    }

    /**
     * get price of the book
     * @return double
     */
    public double getPrice() {
        return price;
    }

    /**
     * set the price for this book
     * @param price book price
     */
    public void setPrice(double price) {
        this.price = price;
    }

    /**
     * get the quantity of book
     * @return int
     */
    public int getQty() {
        return qty;
    }

    /**
     * set book quantity
     * @param qty quantity of book
     */
    public void setQty(int qty) {
        this.qty = qty;
    }


    @Override
    public String toString() {
        return  "The following book as this authors detail: " +this.author.toString();
    }
}
